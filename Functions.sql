-- Reports --

CREATE OR REPLACE FUNCTION GetAllReports()
RETURNS SETOF PUBLIC.REPORT
LANGUAGE plpgsql
AS $$
BEGIN
	RETURN QUERY SELECT * FROM PUBLIC.REPORT;
END;
$$

DROP FUNCTION GetAllReports;

CREATE OR REPLACE FUNCTION GetAllReportsByAuthor(authorId integer)
RETURNS SETOF PUBLIC.REPORT
LANGUAGE plpgsql
AS $$
BEGIN 
	RETURN QUERY SELECT * FROM PUBLIC.REPORT 
	WHERE "author" = authorId;
END;
$$

DROP FUNCTION GetAllReportsByAuthor;

CREATE OR REPLACE FUNCTION GetReportByID(reportId integer)
RETURNS SETOF PUBLIC.REPORT
LANGUAGE plpgsql
AS $$ 
BEGIN 
	RETURN QUERY SELECT * FROM PUBLIC.REPORT 
	WHERE "id" = reportId; 
END;
$$

DROP FUNCTION GetReportByID;

-- Users --

CREATE OR REPLACE FUNCTION GetAllUsers()
RETURNS SETOF PUBLIC.USERS
LANGUAGE plpgsql
AS $$
BEGIN
	RETURN QUERY SELECT * FROM PUBLIC.USERS;
END;
$$

DROP FUNCTION GetAllUsers;

CREATE OR REPLACE FUNCTION GetAllUsersWithRole(roleId integer)
RETURNS SETOF PUBLIC.USERS
LANGUAGE plpgsql
AS $$
BEGIN
	RETURN QUERY SELECT * FROM PUBLIC.USERS 
	WHERE "role" = roleId;
END;
$$

DROP FUNCTION GetAllUsersWithRole;

CREATE OR REPLACE FUNCTION GetUserByID(userId integer)
RETURNS SETOF PUBLIC.USERS
LANGUAGE plpgsql
AS $$ 
BEGIN 
	RETURN QUERY SELECT * FROM PUBLIC.USERS 
	WHERE "id" = userId; 
END;
$$

DROP FUNCTION GetUserByID;

-- Comments --

CREATE OR REPLACE FUNCTION GetAllCommentsToReport(reportId integer)
RETURNS SETOF PUBLIC.COMMENT
LANGUAGE plpgsql
AS $$
BEGIN
	RETURN QUERY SELECT * FROM PUBLIC.COMMENT 
	WHERE "report" = reportId;
END;
$$

DROP FUNCTION GetAllCommentsToReport;

CREATE OR REPLACE FUNCTION GetComment(commentId integer)
RETURNS SETOF PUBLIC.COMMENT
LANGUAGE plpgsql
AS $$
BEGIN
	RETURN QUERY SELECT * FROM PUBLIC.COMMENT
	WHERE "id" = commentId;
END;
$$

DROP FUNCTION GetComment;

CREATE OR REPLACE FUNCTION DeleteComment()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$ 
BEGIN 
	DELETE FROM COMMENT WHERE Report = OLD.ID;
    RETURN OLD;
END;
$$

DROP FUNCTION DeleteComment;

-- StatusHistory

CREATE OR REPLACE FUNCTION GetStatusHistoryToReport(reportId integer)
RETURNS SETOF PUBLIC.ATUSHISTORY
LANGUAGE plpgsql
AS $$
BEGIN
	RETURN QUERY SELECT * FROM PUBLIC.STATUSHISTORY 
	WHERE "report" = reportId;
END;
$$

DROP FUNCTION GetStatusHistoryToReport;

CREATE OR REPLACE FUNCTION CreateStatusHistory()
RETURNS TRIGGER 
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO STATUSHISTORY (Report, Statuses) VALUES (NEW.ID, '{}');
    RETURN NEW;
END;
$$

DROP FUNCTION CreateStatusHistory;

CREATE OR REPLACE FUNCTION DeleteStatusHistory()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$ 
BEGIN 
	DELETE FROM STATUSHISTORY WHERE Report = OLD.ID;
    RETURN OLD;
END;
$$

DROP FUNCTION DeleteStatusHistory;

-- JSON --

CREATE OR REPLACE FUNCTION ExportReportsToJson(filePath text)
RETURNS VOID 
LANGUAGE plpgsql
AS $$
DECLARE
 JSON_DATA JSON;
BEGIN
 BEGIN
   SELECT JSON_AGG(ROW_TO_JSON(REPORT)) INTO JSON_DATA FROM REPORT;
   PERFORM PG_FILE_WRITE(filePath, JSON_DATA::TEXT, true);
 EXCEPTION WHEN OTHERS THEN
   RAISE 'Произошла ошибка: %', SQLERRM;
 END;
END;
$$

SELECT * FROM ExportReportsToJson('D:\Labs\BDKyrsach\data.json');

DELETE FROM Report

DROP FUNCTION ExportReportsToJson;

CREATE OR REPLACE FUNCTION IMPORT_REPORTS_FROM_JSON_FILE(FILE_PATH TEXT)
RETURNS TABLE (
 ID INTEGER,
 Author INTEGER,
 Text TEXT,
 Title TEXT
) AS $$
DECLARE 
 FILE_CONTENT TEXT;
 JSON_DATA JSON;
 REPORT_DATA JSON;
BEGIN
 CREATE TEMP TABLE IF NOT EXISTS temp_reports (
   ID INTEGER,
   Author INTEGER,
   Text TEXT,
   Title TEXT
 );
 DELETE FROM temp_reports;
 BEGIN
   FILE_CONTENT := pg_read_file(FILE_PATH, 0, 1000000000);
 EXCEPTION WHEN OTHERS THEN
   RAISE 'Файл не найден: %', FILE_PATH;
 END;
 BEGIN
   JSON_DATA := FILE_CONTENT::JSON;
 EXCEPTION WHEN OTHERS THEN
   RAISE 'Некорректный JSON: %', SQLERRM;
 END;
 FOR REPORT_DATA IN SELECT * FROM json_array_elements(JSON_DATA)
 LOOP
   IF NOT (REPORT_DATA::jsonb ? 'id' AND REPORT_DATA::jsonb ? 'author' AND REPORT_DATA::jsonb ? 'text' AND REPORT_DATA::jsonb ? 'title') THEN
     CONTINUE;
   END IF;
   INSERT INTO temp_reports (ID, Author, Text, Title)
   VALUES (
	 (REPORT_DATA->>'id')::INTEGER,
     (REPORT_DATA->>'author')::INTEGER, 
     REPORT_DATA->>'text', 
     REPORT_DATA->>'title'
   );
  END LOOP;
RETURN QUERY SELECT * FROM temp_reports;
END;
$$ LANGUAGE PLPGSQL;

SELECT * FROM IMPORT_REPORTS_FROM_JSON_FILE('D:\Labs\BDKyrsach\data.json');
	